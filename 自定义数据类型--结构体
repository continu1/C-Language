#include <stdio.h>


//声明一个结构体类型
//通过学生来创建学生变量(对象)
//struct Stu
//{
//	char name[20];
//	int age;
//	char tele[12];
//	char sex[5];
//	int id[20];
//}s4,s5,s6;//全局变量
//struct Stu s3;//全局变量
//int main()
//{
//	//创建的结构体变量(局部变量)
//	struct Stu s1;
//	struct Stu s2;
//	return 0;
//}


//匿名结构体类型
//struct
//{
//	int a;
//	char b;
//	float c;
//}x;
//struct
//{
//	int num;
//	char ch;
//	float c;
//}a[20],*p;


//匿名结构体指针类型
//struct
//{
//	int a;
//	char b;
//	float c;
//}* sa;
//struct
//{
//	int a;
//	char b;
//	float c;
//}* pa;


//结构的自引用
//struct Note
//{
//	int data;
//	struct Note* n;
//};

//typedef struct Note
//{
//	int data;
//	struct Note* n;
//}node;


//结构体变量的初始化
//struct S
//{
//	char c;
//	int a;
//	double d;
//	char arr[20];
//};
//int main()
//{
//	struct S s1 = {'c',20,3.14,"hello world"};
//	printf("%c %d %lf %s\n",s1.c,s1.a,s1.d,s1.arr);
//	return 0;
//}


//struct T
//{
//	int a;
//	char ch;
//};
//struct S
//{
//	double d;
//	struct T t1;
//	char w;
//};
//int main()
//{
//	struct S s1 = {3.28,{20,'r'},'R'};
//	printf("%d %c",s1.t1.a,s1.t1.ch);
//	return 0;
//}


//结构体内存对齐
//struct s1
//{
//	char c1;
//	int a;
//	char c2;
//};
//struct s2
//{
//	char c1;
//	char c2;
//	int a;
//};
//struct s3
//{
//	double d;
//	char c;
//	int i;
//};
//struct s4
//{
//	char c1;
//	struct s3 s3;
//	double d;
//};
//struct s5
//{
//	int a;
//	char c1;
//	char c2;
//};
//int main()
//{
//	struct s1 s1 = {0};
//	struct s2 s2 = {0};
//	struct s3 s3 = {0};
//	struct s4 s4 = {0};
//	struct s5 s5 = {0};
//	printf("%d\n",sizeof(s1));
//	printf("%d\n",sizeof(s2));
//	printf("%d\n",sizeof(s3));
//	printf("%d\n",sizeof(s4));
//	printf("%d\n",sizeof(s5));
//	return 0;
//}


//修改默认对齐数
//struct s1
//{
//	char c1;
//	double d;
//};
////设置默认对齐数为4
//#pragma pack(4)
//struct s2
//{
//	char c1;
//	double d;
//};
//#pragma pack()
////取消设置的默认对齐数
//
//int main()
//{
//	struct s1 s1;
//	struct s2 s2;
//	printf("%d\n",sizeof(s1));
//	printf("%d\n",sizeof(s2));
//	return 0;
//}


//offsetof计算偏移量
//#include <stddef.h>
//struct s
//{
//	char c;
//	int i;
//	double d;
//};
//int main()
//{
//	printf("%d\n",offsetof(struct s,c));
//	printf("%d\n",offsetof(struct s,i));
//	printf("%d\n",offsetof(struct s,d));
//	return 0;
//}


//结构体传参
//struct s
//{
//	int a;
//	char c;
//	double d;
//};
//int main()
//{
//	struct s s1;
//	s1.a = 10;
//	s1.c = 'w';
//	s1.d = 3.56;
//	return 0;
//}


//struct s
//{
//	int a;
//	char c;
//	double d;
//};
//void Init(struct s* ps)
//{
//	ps -> a = 30;
//	ps -> c = 'L';
//	ps -> d = 6.28;
//}
//void Print1(struct s tmp)
//{
//	printf("%d %c %lf\n",tmp.a,tmp.c,tmp.d);
//}
//void Print2(const struct s *ps)
//{
//	printf("%d %c %lf\n",ps->a,ps->c,ps->d);
//}
//int main()
//{
//	struct s s1 = {0};
//	Init(&s1);
//	Print1(s1);//传值--不推荐(占用空间大);函数传参的时候,参数是需要压栈的,会有时间和空间上的系统开销 
//	Print2(&s1);//传址---推荐
//	return 0;
//}



//结构体实现位段--二进制位
//struct S
//{
//	int a:2;
//	int b:5;
//	int c:10;
//	int d:30;
//};
//int main()
//{
//	struct S s1;
//	printf("%d\n",sizeof(s1));
//	return 0;
//}


struct s
{
	char a:3;
	char b:4;
	char c:5;
	char d:4;
};
int main()
{
	struct s s1 = {0};
	s1.a = 10;
	s1.b = 12;
	s1.c = 3;
	s1.d = 4;
	printf("%d\n",sizeof(s1));
	return 0;
}
