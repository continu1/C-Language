#include <stdio.h>
#include <string.h>
#include <stdlib.h>

//动态内存分配

//malloc and free
//int main()
//{
//	//向内存申请10个整型的空间
//	int* p = (int*)malloc(10*sizeof(int));
//	//int* p = (int*)malloc(INT_MAX);
//	int i;
//	if(p == NULL)
//	{
//		//打印错误原因
//		printf("%s\n",strerror(errno));
//	}
//	else
//	{
//		//正常使用空间
//		printf("%p\n",p);
//		for(i=0;i<10;i++)
//		{
//			*(p+i) = i;
//			printf("%d ",*(p+i));
//		}
//	}
//	//当动态申请的空间不再使用的时候
//	//就应该还给操作系统
//	free(p);
//	p = NULL;
//	return 0;
//}


//calloc
//int main()
//{
//	int* p = (int*)calloc(10,sizeof(int));
//	int i;
//	if(p == NULL)
//	{
//		printf("%s\n",strerror(errno));
//	}
//	else
//	{
//		for(i=0;i<10;i++)
//		{
//			printf("%d ",*(p+i));
//		}
//		printf("\n");
//	}
//	//free函数是用来释放动态开辟的空间的
//	free(p);
//	p = NULL;
//	return 0;
//}


//realloc
//调整动态内存空间的大小
//int main()
//{
//	int* p = (int*)malloc(20);
//	int i = 0;
//	int* p2;
//	if(p == NULL)
//	{
//		printf("%s\n",strerror(errno));
//	}
//	else
//	{
//		for(i=0;i<5;i++)
//		{
//			p[i] = i;
//			printf("%d ",*(p+i));
//		}
//	}
//	//就是在使用malloc开辟的20个字节的空间
//	//假设20个字节的空间不够用了,现需要40个字节的空间
//	//这就可以用realloc来调整动态开辟的内存
//
//	//realloc函数使用的注意事项:
//	//1.如果p指向的空间之后有足够的内存空间可以追加,则直接追加,后返回p
//	//2.如果p指向的空间之后没有足够的内存空间可以追加,则realloc函数会重新找一个新的内存区域开辟一块
//	//  满足需求的空间,并且把原来内存中的数据拷贝回来,释放旧的内存空间,最后返回新开辟的内存空间地址
//	//3.得用一个新的变量来接收realloc函数的返回值
//	p2 = (int*)realloc(p,40);
//	if(p2 == NULL)
//	{
//		printf("%s\n",strerror(errno));
//	}
//	else
//	{
//		p = p2;
//		p2 = NULL;
//		for(i=5;i<10;i++)
//		{
//			p[i] = i;
//			printf("%d ",*(p+i));
//		}
//	}
//	free(p);
//	p =NULL;
//	return 0;
//}


//常见的动态内存操作错误:
//1.对空指针(NULL)进行接引用操作
//int main()
//{
//	int* p = (int*)malloc(40);
//	//万一malloc失败了,p就被赋值为NULL
//	int i = 0;
//	for(i=0;i<10;i++)
//	{
//		*(p+i) = i;
//		printf("%d ",*(p+i));
//	}
//	free(p);
//	p = NULL;
//	return 0;
//}


//2.对动态开辟内存的越界访问
//int main()
//{
//	int* p = (int*)malloc(5*sizeof(int));
//	int i;
//	if(p == NULL)
//	{
//		return 0;
//	}
//	else
//	{
//		i = 0;
//		for(i=0;i<10;i++)
//		{
//			*(p+i) = i;
//		}
//	}
//	free(p);
//	p = NULL;
//	return 0;
//}


//3.对非动态开辟内存使用free释放
//int main()
//{
//	int a = 10;//栈区
//	int* p = &a;//栈区
//	*p = 20;
//	free(p);//堆区
//	p = NULL;
//	return 0;
//}


//4.使用free释放动态开辟内存的一部分
//int main()
//{
//	int* p = (int*)malloc(40);
//	int i;
//	if(p == NULL)
//	{
//		return 0;
//	}
//	else
//	{
//		for(i=0;i<10;i++)
//		{
//			*p++ = i;
//		}
//	}
//	free(p);
//	p = NULL;
//	return 0;
//}


//5.对同一块动态内存多次释放
//int main()
//{
//	int* p = (int*)malloc(40);
//	if(p == NULL)
//	{
//		return 0;
//	}
//	free(p);
//	//解决方法:
//	//p = NULL;
//	free(p);
//	return 0;
//}


//6.动态开辟内存忘记释放(内存泄漏)
//#include <Windows.h>
//int main()
//{
//	while(1)
//	{
//		malloc(1);
//		Sleep(1000);//1s
//	}
//	return 0;
//}


//几个经典的笔试题:
//错误示范1
//void GetMemory(char* p)
//{
//	p = (char*)malloc(100);
//}
//void Test(void)
//{
//	char* str = NULL;
//	GetMemory(str);
//	strcpy(str,"hello world");
//	printf(str);
//}
//int main()
//{
//	Test();
//	return 0;
//}
//更正:法一
//void GetMemory(char** p)
//{
//	*p = (char*)malloc(100);
//}
//void Test(void)
//{
//	char* str = NULL;
//	GetMemory(&str);
//	strcpy(str,"hello world");
//	printf(str);
//}
//int main()
//{
//	Test();
//	return 0;
//}
//更正:法二
//char* GetMemory(char* p)
//{
//	p = (char*)malloc(100);
//	return p;
//}
//void Test(void)
//{
//	char* str = NULL;
//	str = GetMemory(str);
//	strcpy(str,"hello world");
//	printf(str);
//}
//int main()
//{
//	Test();
//	return 0;
//}


//错误示范2
//char* GetMemory(void)
//{
//	char p[] = "hello world";//栈区
//	//数组p出数组后生命周期结束,空间还回给操作系统,数据内容被销毁
//	return p;
//}
//void Test(void)
//{
//	char* str = NULL;
//	str = GetMemory();
//	printf(str);
//}
//int main()
//{
//	Test();
//	return 0;
//}


//错误示范3
//int* test()
//{
//	int a = 10;//栈区
//	return &a;
//}
//int main()
//{
//	int* p = test();
//	*p = 20;
//	return 0;
//}
//修改:
//int* test()
//{
//	static int a = 10;
//	//static修饰局部变量,生命周期变长,出了函数后数据内容也不会被销毁
//	//static修饰后,a从栈区转到静态区
//	return &a;
//}
//int main()
//{
//	int* p = test();
//	*p = 20;
//	return 0;
//}


//错误示范4
//void GetMemory(char** p,int num)
//{
//	*p = (char*)malloc(num);
//}
//void Test(void)
//{
//	char* str = NULL;
//	GetMemory(&str,100);
//	strcpy(str,"hello");
//	printf(str);
//	//未释放动态内存开辟的空间,导致内存泄漏
//	//解决方法:
//	free(str);
//	str = NULL;
//}
//int main()
//{
//	Test();
//	return 0;
//}


//错误示范5
//void Test(void)
//{
//	char* str = (char*)malloc(100);
//	strcpy(str,"hello");
//	free(str);
//	//free释放str指向的空间后,并不会把str置为NULL
//	if(str != NULL)
//	{
//		strcpy(str,"world");//非法访问
//		printf(str);
//	}
//}
//int main()
//{
//	Test();
//	return 0;
//}


//柔性数组
//struct s
//{
//	int n;
//	int arr[];//未知大小---柔性数组成员---数组的大小是可以调整的
//};
//struct t
//{
//	char c;
//	int arr[0];//未知大小
//};
//int main()
//{
//	int i;
//	struct s s1;
//	struct t* pt;
//	struct t* ptr;
//	printf("%d\n",sizeof(s1));
//	pt = (struct t*)malloc(sizeof(struct t) + 5*sizeof(int));
//	pt->c = 'r';
//	for(i=0;i<5;i++)
//	{
//		pt->arr[i] = i;
//		printf("%d ",pt->arr[i]);
//	}
//	//假设空间不够
//	ptr = (struct t*)realloc(pt,44);
//	if(ptr == NULL)
//	{
//		printf("%s\n",strerror(errno));
//	}
//	else
//	{
//		pt = ptr;
//		for(i=5;i<10;i++)
//		{
//			pt->arr[i] = i;
//			printf("%d ",pt->arr[i]);
//		}
//	}
//	//释放
//	free(pt);
//	pt = NULL;
//	return 0;
//}


//也可以不用柔性数组
struct s
{
	int n;
	int* arr;
};
int main()
{ 
	struct s* p = (struct s*)malloc(sizeof(struct s));
	int i = 0;
	p->n = 100;
	p->arr = (int*)malloc(10*sizeof(int));
	for(i=0;i<10;i++)
	{
		p->arr[i] = i;
		printf("%d ",p->arr[i]);
	}
	//释放
	free(p->arr);
	p = NULL;
	free(p);
	p = NULL;
	return 0;
}
