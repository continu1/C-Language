#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <windows.h>
#include <string.h>
//int = signer int 它定义的变量是有符号的
//EOF = end of file 是文件的结束标志,它的值是-100
/*    //宏的定义：
#define MAX(x,y) (x>y?x:y)
int main()
{
	int a = 10;
	int b = 20;
	int max = 0;
	max = MAX(a,b);
	printf("max = %d\n",max);
	return 0;
}
/*
#define MAX 100  //#定义标识符常量
int main()
{
	int a = MAX;
	printf("%d\n",a);

	return 0;
}
/*
void test()
{
	int a = 1;
	a++;
	//static int b = 0;//static修饰局部变量,使局部变量的生命周期变长
	//b++;
	printf("a = %d\n",a);
	//printf("b = %d\n",b);
}
int main()
{
	int i = 0;
	while (i<5)
	{
		test();
		i++;
		//printf("i = %d\n",i);
	}
	return 0;
}
/*
int main()
{
	typedef unsigned int u_int;//typedef是类型重命名
	unsigned int a = 20;       //此处将unsigned int 重命名为u_int
	u_int b = 90;
	printf("%d\n",a);
	return 0;
}
/*
int main()
{
	int a = 10;
	int b = a++;//b=10 a=11
	int c = ++a;//c=11 a=11
	int d = a--;//d=10 a=9
	int e = --a;//e=9  a=9
	printf("%d\n",b);
	printf("%d\n",c);
	printf("%d\n",d);
	printf("%d\n",e);
	return 0;
}
/*
int main()
{
	register int a = 10;//建议把a定义成寄存器变量（方便a后期频繁使用）
	return 0;
}
/*
int main()
{  // = 赋值    == 判断相等
   // a = a + 10; 等价于 a += 10;
   // 复合赋予值：+=  -=  *=  /=  %=  <<=  >>=  &=  ^=  |=
	return 0;3
}
/*
int main()
{   //例：6的二进制数为110; 9为1001
	//二进制位操作：（其中c语言规定0为假,非0为真）
	//&  按位与  （一假为假----有0则为0）
	//|  按位或  （一真为真----有1则为1）
	//^  按位异或（对应二进制位相同则为0；不同则为1）
	int a = 3;
	int b = 5;
	int x = a&b;
	int y = a|b;
	int z = a^b;
	printf("%d\n",x); //1
	printf("%d\n",y); //7
	printf("%d\n",z); //6
	return 0;
}
/*
int main()
{
	int a =32;       //在int类型中字符占4个字节的空间——32个比特位
	int b = a<<2;
	int c = a>>3;
	printf("%d\n",b);
	printf("%d\n",c);//标注：<<：左移  >>：右移（都是移二进制位操作符）
	return 0;
}
/*
int main()
{
	int a = 5%2;     //  %号最后运算的值取模（不懂）
	printf("%d\n",a);
	return 0;
}
/*
int main()
{
	int a = 5/2;//    /号运算的值最终为最小整数
	printf("%d\n",a);
	return 0;
}
/*   数组：
int main()
{                    //第一个元素下标默认为0,第二个元素为1依次递增
	int abc[10] = {3,4,5,6,7,8,9,10,11,12};//定义一个存放10个整数数字的数组
	printf("%d\n",abc[5]);//用下标的方式访问元素——abc[下标]
  //打印数组的元素:
	int num = 0;
	while(num<10)
	{
		printf("%d ",abc[num]);
		num++;
	}
	return 0;
}

/*   Add函数:
int Add(int x,int y)
{
	int z = x + y;
	return z;
}
int main()
{ 
	int a = 10;
	int b = 20;
	int c = 3;
	int d = 5;
	int sum = 0;
	sum = add(a,b);
	sum = add(c,d);
	printf("sum = %d\n",sum);

	return 0;
}

/*     while循环：
int main()
{
	int line = 0;
	printf("开始敲代码！\n");

	while(line<20000)
	{
		printf("敲一行代码: %d\n",line);
		line++;
	}
	if(line>=20000)
	printf("好offer\n");
	return 0;
}   */

//****************************************************************

//struct book
//{
//	char name[10];
//	short price;
//};
//int main()
//{
//	struct book x = {"history",90};
//	struct book* a = &x;//利用a打印出书名与价格(方法1)：
//	printf("书名:%s\n",(*a).name);//.   结构体变量.成员
//	printf("价格:%d元\n",(*a).price);//方法2:(比法1简洁)
//	printf("%s\n",a->name);//->   结构体指针->成员
//	printf("%d\n",a->price);
//	return 0;
//}


/*
//创建一个结构体类型：
//结构体——用于描述复杂对象。 struct--结构体关键字
struct book
{
	char name[5];
	short price;
};
int main()
{
	struct book x = {"语文",70};
	printf("书名:%s\n",x.name);         //例1
	printf("价格:%d元\n",x.price);
	x.price = 65;
    printf("修改后价格:%d元\n",x.price);

	//struct book y = {"数学",90};
	//printf("书名:%s\n",y.name);          //例2
	//printf("价格:%d元\n",y.price);
	//y.price = 70;
	//printf("修改后价格:%d元\n",y.price);
	//return 0;
}


/*
//指针使用示例(1)a;
int main()
{
	char b = 'x';
	char* t = &b;
	*t = 'y';//此时指针名字叫t
	printf("%c\n",b);//此时b = 'y';
	printf("%d\n",sizeof(t));//计算指针大小（单位：字节）
	return 0;
}
/*


//指针使用示例(2)：
int main()
{
	int a = 10;
	int* p = &a;
	*p = 20;//此时指针名字叫p
	printf("%p\n",&a);
	printf("a = %d\n",a);//此时a=20
	return 0;
}
/*


int main()
{
	int a = 10;//四个字节
	int* p = &a; //&是取地址操作符
	// *是解引用操作符
	//有一种变量是用来存放地址的——指针变量
	printf("%p\n",&a);//将a的地址打印出来
	printf("%p\n",p);
	return 0;
} */


/*
//求10个数中的最大值:
#include <stdio.h>
int main()
{
	int arr[] = {-1,-2,-3,5,6,8,77,56,21,594,894,56,16,54,89,888,77,77};
	int max = arr[0];//最大值
	int i = 0;
	int sz = sizeof(arr)/sizeof(arr[0]);
	for(i=0;i<=sz;i++)
	{
		if(arr[i]>max)
		{
			max = arr[i];
		}
	}
	printf("max=%d\n",max);
	return 0;
}


/*
//计算1/1 - 1/2 + 1/3 -1/4 + 1/5 …… + 1/99 - 1/100,的值:
#include <stdio.h>
int main()
{
	int i =0;
	int flag =1;
	double sum = 0;
	for(i=1;i<=100;i++)
	{
		sum += (flag*1.0)/i;
		flag = -flag;
	}
	printf("%lf\n",sum);
	return 0;
}


/*
//列出1到100的整数中出现过多少次数字9:
#include <stdio.h>
int main()
{
	int i = 0;
	int a = 0;
	printf("1到100的整数中出现过数字9的数字有:\n");
	for(i=1;i<=100;i++)
	{
		if(i%10==9 || i/10==9)
		{
			printf("%d ",i);
			a++;
		}
	}
	printf("1到100的整数中出现过数字9的个数为:%d\n",a);
	return 0;
}


/*
//打印100到200之间的素数及个数：
//素数：只能被1与自己整除
//sqrt--开平方的数学库函数
#include <stdio.h>
int main()
{
	int i = 0;
	int x = 0;
	int a = 0;
	printf("100到200之间的素数为:\n");
	for(i=100;i<=200;i++)
	{
		for(x=2;x<i;x++)
		{
			if(i%x == 0)
			{
				break;
			}
		}
		if(x == i)
		{
			a++;
			printf("%d ",i);
		}
	}
	printf("个数为:%d\n",a);
	return 0;
}


/*
//打印1000到2000年之间的闰年及个数:
//能被400整除的是闰年,能被4整除且不能被100整除的是闰年
#include <stdio.h>
int main()
{
	int year = 0;
	int x = 0;
	printf("1000到2000年之间的闰年:");
	for(x=0,year=1000;year<=2000;year++)
	{
		if(year%4==0 && year%100!=0)
		{
			printf("%d ",year);
			x++;
		}
		else if(year%400==0)
		{
			printf("%d ",year);
			x++;
		}
	}
	printf("闰年的个数:%d个",x);
	return 0;
}
/*


/*
//计算两个数的最大公约数：
#include <stdio.h>
int main()
{
	int a = 0;//rang a>b
	int b = 0;
	scanf("%d%d",&a,&b);
	int x = a;
	int y = b;
	while(a%b)
	{
		int c = b;
		int a = b;
		int b = a%c;
	}
	//if(a%b==0)
		printf("%d",b);
	return 0;
}


/*
//打印1到100之间所有3的倍数的数字：
#include <stdio.h>
int main()
{
	int i = 0;
	for(i=1;i<=100;i++)
	{
		if(i%3 == 0)
		{
			printf("%d ",i);
		}
	}
	return 0;
}


/*
//将三个数由大到小输出：
#include <stdio.h>
int main()
{
	int a = 0;
	int b = 0;
	int c = 0;
	scanf("%d%d%d",&a,&b,&c);
	if(a<b)
	{
		int tmp = a;
		a = b;
		b = tmp;
	}
	if(a<c)
	{
		int tmp = a;
		a = c;
		c = tmp;
	}
	if(b<c)
	{
		int tmp = b;
		b = c;
		c = tmp;
	}
	printf("%d %d %d\n",a,b,c);
	return 0;
}


/*
//模拟用户登录情景，并只能登录三次
#include <string.h>
#include <stdio.h>
int main()
{
	int i = 0;
	char password[20] = {0};
	for(i=0;i<3;i++)
	{
		int a = 2-i;
		printf("请输入密码:");
		scanf("%s",password);
		if(strcmp(password, "123456") == 0)//== 不能用来比较两个字符串是否相等,应该使用一个库函数-strcmp
		{
			printf("密码正确\n");
			break;
		}
		else
		{
			printf("密码错误,您还有%d次机会。\n",a);
		}
	}
	if(i == 3)
	{
		printf("三次都密码错误,退出测试\n");
	}
	return 0;
}


/*
//演示多个字符从两端移动,向中间汇聚
#include <StrongName.h>
#include <Windows.h>
#include <stdlib.h>
#include <stdio.h>
int main()
{
	char arr1[] = "welcome to bit!!!!!!";
	char arr2[] = "####################";
	int left = 0;
	//两个方法计算右下标：
	//int right = sizeof(arr1)/sizeof(arr1[0])-2;
	int right = strlen(arr1)-1;
	while(right>=left)
	{
	    arr2[left] = arr1[left];
	    arr2[right] = arr1[right];
	    printf("%s\n",arr2);
		//停留1秒
		Sleep(1000);//单位:毫秒
		system("cls");//执行系统命令的一个函数   cls--清空屏幕
	    left++;
	    right--;
	}
	printf("%s\n",arr2);//清空屏幕后再打印一次
	return 0;
}


/*
//二分查找算法:
//在有序数组中找到一个元素和它的下标与测试是否有该元素
#include <stdio.h>
int main()
{
	int arr[] = {1,2,3,4,5,6,7,8,9,10,11};
	int sz = sizeof(arr)/sizeof(arr[0]);//计算元素个数
	int k = 0;
	int left = 0;//左下标
	int right = sz-1;//右下标
	scanf("%d",&k);
	while(right>=left)
	{
        int mid = (right+left)/2;
		if(arr[mid]>k)
		{
			right = mid-1;
		}
		else if(arr[mid]<k)
		{
			left = mid+1;
		}
		else
		{
			printf("找到了,下表是:%d\n",mid);
			break;
		}		
	}

	if(left>right)
	{
		printf("找不到此元素\n");
	}
	return 0;
}*/


/*
//goto语句:
//编写一个关机程序:
//system()--执行系统命令的
//strcmp()--比较两个字符串
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
int main()
{
	char input[20] = {0};
	system("shutdown -s -t 180");(秒)
again:
	printf("请注意，计算机将在180秒内关机，取消关机请输入:“不要关机”\n请输入:>");
	scanf("%s",input);
	if(strcmp(input,"不要关机") == 0)
	{
		system("shutdown -a");
	}
	else
	{
		goto again;
	}
	return 0;
}


/*
//猜数字(1到100):
//时间戳：当前计算机时间 - 计算机的起始时间（1970.1.1.0:0:0） = …秒
#include <stdio.h>
#include <gameux.h>
#include <stdlib.h>
#include <Windows.h>
void menu()
{
	printf("#################################\n");
	printf("#####1.重新开始   0.退出游戏#####\n");
	printf("#################################\n");
}
void game()
{
	int ret = 0;
	int guess = 0;//接收猜的数字
	ret = rand()%100+1;//生成1到100之间的随机数
	while(1)
	{
		printf("请猜数字:>");
		scanf("%d",&guess);
		if(guess>ret)
		{
			printf("猜大了\n");
		}
		else if(guess<ret)
		{
			printf("猜小了\n");
		}
		else
		{
			printf("猜对了\n");
			Sleep(5000);
			system("cls");
			break;
		}
	}
}


int main()
{
	int input = 0;
	do
	{
		menu();
		printf("请选择:");
		scanf("%d",&input);
		switch(input)
		{
		case 1:
			game();
			break;
		case 0:
			printf("退出游戏\n");
			break;
		default:
			printf("选择错误\n");
			break;
		}
	}while(input);
	return 0;
}*/


////打印9*9乘法口诀表:
//#include <stdio.h>
//int main()
//{
//	int i = 0;
//	for(i=1;i<=9;i++)//打印九行
//	{
//		int j = 1;
//		for(j=1;j<=i;j++)
//		{
//			printf("%d*%d=%-2d ",i,j,i*j);
//		}
//		printf("\n");
//	}
//	return 0;
//}


//int main()
//{
//	int a,b;
//	char arr[5][4]={{1,2,6},{1,6,9}};//arr[5][4]--代表5行4列
//	for(a=0;a<5;a++)
//	{
//		for(b=0;b<4;b++)
//		{
//			printf("%d ",arr[a][b]);
//		}
//		printf("\n");
//	}
//	printf("%d\n",sizeof(arr));
//	printf("%d\n",strlen(arr));
//	return 0;
//}


//int main()
//{
//	int a = 5%2;
//	printf("a = %d",a);
//	return 0;
//}


//int main()
//{
//	int a = 16;//00000000000000000000000000010000
//	//>> 右移操作符 移动得是2进制位
//	int b = a>>1;
//	printf("a = %d\nb = %d\n",a,b);
//	return 0;
//}


//int main()
//{
//	//&按位与   |按位或   ^按位异或
//	int a = 3;//011
//	int b = 5;//101
//	int c = a&b;//一假为假 001 1
//	int d = a|b;//一真为真 111 7
//	int e = a^b;//相同为0，相异为1 110 6
//	printf("c = %d\nd = %d\ne = %d\n",c,d,e);
//	return 0;
//}


//int main()
//{
//	int a = 10;
//	int b = 20;
//	a = a^b;
//	b = a^b;
//	a = a^b;
//	printf("a = %d \nb = %d\n",a,b);
//	return 0;
//}


//计算一个整数储存在内存(补码)中的二进制中1的个数
//int main()
//{
//	int num = 0;
//	int count = 0;
//	int i = 0;
//	scanf("%d",&num);
//	for(i=0;i<32;i++)
//	{
//		if(1 == ((num>>i)&1))
//		count++;
//	}
//	printf("count = %d",count);
//	return 0;
//}


//int main()
//{
//	int a = 10;
//    a = a + 2;
//	a += 2;
//
//	a = a >> 1;
//	a >>= 1;
//
//	a = a & 1;
//	a &= 1;
//	return 0;
//}


//int main()
//{
//	int a = 10;
//	int* p = &a;
//	*p = 20;
//	printf("a = %d\n",a);
//	printf("p = %p\n",p);
//	return 0;
//}


//int main()
//{
//	int a = 10;
//	char c = 'r';
//	char* p = &c;
//	int arr[10] = {0};
//	//sizeof 计算的变量所占内存空间的大小,单位是字节
//	printf("sizeof(a) = %d\n",sizeof(a));//4
//	printf("sizeof(c) = %d\n",sizeof(c));//1
//	printf("sizeof(p) = %d\n",sizeof(p));//4或8
//	printf("sizeof(arr) = %d\n",sizeof(arr));//40
//	return 0;
//}


//int main()
//{
//	int a = 0;
//	printf("%d\n",~a);
//	return 0;
//}


//int main()
//{
//	int a = 10;
//	int b = 10;
//	int c = 10;
//	int d = 10;
//	printf("a=b=c=d= %d\n",a);
//	printf("++a = %d\n",++a);
//	printf("--b = %d\n",--b);
//	printf("ac++ = %d\n",c++);
//	printf("ad-- = %d\n",d--);
//	printf("%d",sizeof(int [10]));
//	return 0;
//}


//int main()
//{
//	int a = (int)3.14;
//	printf("a = %d \n",a);
//	return 0;
//}


//int main()
//{
//	char a = 3;    //00000011
//	char b = 127;  //01111111
//	char c = a + b;//10000010
//	printf("c = %d\n",c);
//	return 0;
//}


//int main()
//{
//	int a = 3+2*6;
//	printf("%d",a);
//	return 0;
//}


//int main()
//{
//	int a,b;
//	if(a>b,a=1+9,a=1,b=a+30)
//	printf("%d\n",b);
//	return 0;
//}


//int main()
//{
//	char a = 3;
//	a = (int)a;
//	printf("%d\n",a);
//	return 0;
//}


//int main()
//{
//	int a = 8;//1000
//	int b = 6;//0110
//	int c = a&b;//0000
//	printf("%d\n",c);
//    c = a^b;//1110
//	printf("%d\n",c);
//	c = a|b;//1110
//	printf("%d\n",c);
//	return 0;
//}



//整型提升
//示例1
//int main()
//{
//    char a = 0xb6;//10110110
//	short b = 0xb600;
//	int c = 0xb6000000;
//	if(a == 0xb6)
//		printf("a\n");
//	if(b == 0xb600)
//		printf("b\n");
//	if(c == 0xb6000000)
//		printf("c\n");
//	return 0;
//}
//示例二
//int main()
//{
//	char c = 1;//00000001--无符号数
//	printf("%u\n",sizeof(c));//sizeof(char)  1
//	printf("%u\n",sizeof(+c));//sizeof(int)  4 
//	printf("%u\n",sizeof(!c));//sizeof(int)  4
//	return 0;
//}


//int mian()
//{
//	int a = 1;
//	float b = 3.14;
//	printf("%d\n",a+b);
//	return 0;
//}


//int main()
//{
//	float b =3.14;
//	int a = b;//隐式转换，转换不合理会出现精度丢失
//	printf("%d\n",a);
//	return 0;
//}


//int main()
//{
//	int a = 10;
//	int b = 20;
//	int c = b+a*3;//操作符优先级
//	printf("%d\n",c);
//	return 0;
//}


//代码2-非法表达式
//int main()
//{
//	int c = 1;
//	int a = c + --c;
//	printf("%d\n",a);
//	return 0;
//}


//代码3-非法表达式
//int main()
//{
//	int i = 10;
//	i = i-- - --i * (i = -3) * i++ + ++i;
//	printf("i = %d\n",i);
//	return 0;
//}


//代码4-非法表达式
//int fun()
//{
//	static int count = 1;
//	return ++count;
//}
//int main()
//{
//	int answer;
//	answer = fun() - fun() * fun();
//	printf("%d\n",answer);
//	return 0;
//}


//指针:
//int main()
//{
//	int a = 10;
//	int* p = &a;
//	printf("%p\n",p);
//	return 0;
//}


//int main()
//{
//	//32位机器--32条地址线--32个bit--4个字节
//	printf("%d\n",sizeof(char*));
//	printf("%d\n",sizeof(int*));
//	printf("%d\n",sizeof(long*));
//	printf("%d\n",sizeof(short*));
//	printf("%d\n",sizeof(long long*));
//	printf("%d\n",sizeof(double*));
//	printf("%d\n",sizeof(float*));
//	return 0;
//}


//int main()
//{
//	int n = 0x11223344;
//	int* pa = &n;
//	char* pc = (char*)&n;
//	*pc = 0;
//	printf("%d\n",n);
//	return 0;
//}


//int main()
//{
//	int a = 0x11223344;
//	int* pa = &a;
//	*pa = 0;
//	return 0;
//}


//int main()
//{
//	int a = 0x11223344;
//	int* pa = &a;
//	char* pc = (char*)&a;
//	printf("%p\n",pa);
//	printf("%p\n",pa+1);
//	printf("%p\n",pc);
//	printf("%p\n",pc+1);
//	return 0;
//}


//int main()
//{
//	int arr[10] = {0};
//	int* p = arr;//数组名-首元素地址
//	int i = 0;
//	for(i=0;i<10;i++)
//	{
//		*(p+i) = 1;
//		printf("%d\n",arr[i]);
//	}
//	return 0;
//}


//int main()
//{
//	int a;//局部变量不初始化，默认是随机值
//	int* p = &a;//局部的指针变量，就被初始化随机值
//	return 0;
//}


//int main()
//{
//	int arr[10] = {0};
//	int* p = arr;
//	int i =0;
//	for(i=0;i<12;i++)
//	{
//		p++;
//	}
//	return 0;
//}


//int* test()
//{
//	int a = 10;
//	return &a;
//}
//int main()
//{
//	int* p = test();
//	*p = 20;
//	return 0;
//}


//int main()
//{
//	int a[10] = {0};
//	int i = 0;
//	int* p = a;
//	for(i=0;i<=12;i++)
//	{
//		//*p = i;
//		//p++;
//		*p++ = i;
//	}
//	return 0;
//}


//int main()
//{
//	int a = 10;
//	int b = 50;
//	int* p = &a;
//	*p = 5;
//	p = NULL;
//	if(p == NULL)
//	{
//		char* p = (char*)&b;
//		printf("%p\n",p);
//	}
//	else if(p != NULL)
//	{
//		p = NULL;
//		printf("%p\n",(char)*&b);
//	}
//	return 0;
//}


//int main()
//{
//	int arr[10] = {1,2,3,4,5,6,7,8,9,10};
//	int i = 0;
//	int sz = sizeof(arr)/sizeof(arr[0]);
//	for(i=0;i<sz;i++)
//	{
//		//1.
//		//int* p = arr+i;
//		//printf("%d ",*p);
//
//		//2.
//		//printf("%d ",arr[i]);
//	}
//	return 0;
//}


//int main()
//{
//	int arr[10] = {0,1,2,3,4,5,6,7,8,9};
//	int i = 0;
//	int* p = &arr[9];
//	for(i=0;i<4;i++)
//	{
//		printf("%d ",*p);
//		*p-=2;
//	}
//	return 0;
//}


//int main()
//{
//	char ch[5] = {0};
//	int arr[10] = {1,2,3,4,5,6,7,8,9,10};
//	int b = &arr[9] - &arr[0];
//	int c = &arr[5] - &arr[8];
//	printf("%d\n",b);
//	printf("%d\n",c);
//	printf("%d\n",arr[5] - ch[2]);//结果未知，不兼容，也没啥价值
//	return 0;
//}


//int my_strlen(char* str)
//{
//	char* start = str;
//	char* end = str;
//	while(*end != '\0')
//	{
//		end++;
//	}
//	return end - start;
//}
//int main()
//{
//	char arr[] = "bit";
//	int len = my_strlen(arr);
//	printf("%d\n",len);
//	return 0;
//}


//int main()
//{
//	int arr[10] = {0};
//	printf("%p\n",arr);//首元素地址
//	printf("%p\n",arr+1);
//	
//	printf("%p\n",&arr[0]);//首元素地址
//	printf("%p\n",&arr[0]+1);
//
//	printf("%p\n",&arr);//整个数组地址
//	printf("%p\n",&arr+1);
//	return 0;
//}


//int main()
//{
//	int arr[10] ={0};
//	int i = 0;
//	int* p = arr;
//	int sz =sizeof(arr)/sizeof(arr[0]);
//	for(i=0;i<sz;i++)
//	{
//		printf("%p ===== %p\n",&arr[i],p+i);
//	}
//	return 0;
//}


//int main()
//{
//	int a = 10;
//	int* pa = &a;//一级
//	int** ppa = &pa;//ppa就是二级指针
//	int*** pppa = &ppa;//三级
//	int**** ppppa = &pppa;//四级
//	printf("%p\n",ppppa);
//  printf("%d\n",****ppppa);
//	return 0;
//}


//int main()
//{
//	int a = 10;
//	int b = 20;
//	int c = 30;
//	int i = 0;
//
//	int* pa = &a;
//	int* pb = &b;
//	int* pc = &c;
//
//	int* arr[3] = {pa,pb,pc};
//	for(i=0;i<3;i++)
//	{
//		printf("%d\n",*(arr[i]));
//	}
//	return 0;
//}


struct s
{
	int a;
	char ch[10];
	struct stu s5;
};
typedef struct stu
{
	char name[20];
	short age;
	char telt[12];
}stu;
int main()
{
	struct stu s5;
	stu s2 = {"旺财",19,"51513321"};
	struct s a1 ={10,"asdf",{"旺财",19,"515321"}};
	printf("%d\n",a1.s5.age);
	return 0;
}
