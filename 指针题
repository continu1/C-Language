#include <stdio.h>
#include <string.h>

////题一:
////一维数组
//int main()
//{
//	//数组名是首元素地址,除了2点:
//	//1.sizeof(数组名) --- 数组名表示整个数组
//	//2.&数组名 --- 数组名表示整个数组
//	int a[] = {1,2,3,4};
//	printf("%d\n",sizeof(a));//sizeof(数组名)计算的是数组总大小,单位是字节:4*4=16
//	printf("%d\n",sizeof(a + 0));//数组名这里表示首元素地址,a+0后还是首元素地址,地址的大小就是4/8个字节
//	printf("%d\n",sizeof(*a));//数组名这里表示首元素地址,*a就是首元素,sizeof(首元素)就是4
//	printf("%d\n",sizeof(a + 1));//数组名这里表示首元素地址,a+1就是第二个元素的地址,地址的大小就是4/8个字节
//	printf("%d\n",sizeof(a[1]));//第二个元素的大小:4
//	printf("%d\n",sizeof(&a));//&a取出的是数组的地址,但是数组的地址也是地址,地址的大小就是4/8个字节
//	printf("%d\n",sizeof(*&a));//&a取出的是数组的地址,数组的地址解引用访问的是数组,sizeof计算的是数组的大小,单位是字节:16
//	printf("%d\n",sizeof(&a + 1));//&a取出的是数组的地址,&a+1虽然跳过整个数组,但还是地址,所以是4/8个字节
//	printf("%d\n",sizeof(&a[0]));//计算的是第一个元素的地址,所以是4/8个字节
//	printf("%d\n",sizeof(&a[0] + 1));//计算的是第二个元素的地址,所以是4/8个字节
//	return 0;
//}


////题二:
////字符数组
//int main()
//{
//	char arr[] = {'a','b','c','d','e','f'};
//	printf("%d\n",sizeof(arr));//sizeof(数组名)计算的是数组总大小,单位是字节:6*1=6
//	printf("%d\n",sizeof(arr + 0));//数组名这里表示首元素地址,arr+0后还是首元素地址,地址的大小就是4/8个字节
//	printf("%d\n",sizeof(*arr));//数组名这里表示首元素地址,*arr就是首元素,sizeof(首元素)就是1
//	printf("%d\n",sizeof(arr[1]));//第二个元素的大小:1
//	printf("%d\n",sizeof(&arr));//&arr取出的是数组的地址,但是数组的地址也是地址,地址的大小就是4/8个字节
//	printf("%d\n",sizeof(&arr + 1));//&arr取出的是数组的地址,&arr+1虽然跳过整个数组,但还是地址,所以是4/8个字节
//	printf("%d\n",sizeof(&arr[0] + 1));//计算的是第二个元素的地址,所以是4/8个字节
//	return 0;
//}


////题三:
////strlen计算字符串长度,遇到'\0'或0结束
//int main()
//{
//	char arr[] = {'a','b','c','d','e','f'};
//	printf("%d\n",strlen(arr));//数组名这里表示首元素地址,因为数组arr里没有'\0'或0,所以结果是大于6的随机值
//	printf("%d\n",strlen(arr + 0));//数组名这里表示首元素地址,arr+0还是首元素地址,因为数组arr里没有'\0'或0,所以结果是大于6的随机值
//	//printf("%d\n",strlen(*arr));//arr是首元素地址,解引用得到的是首元素'a',因为'a'的Asall码值为97,所以从97为起始地址向后访问数据,属于非法访问内存,是错误的代码
//	//printf("%d\n",strlen(arr[1]));//arr[1]为第二个元素'b',因为'b'的Asall码值为98,所以从98为起始地址向后访问数据,属于非法访问内存,是错误的代码
//	printf("%d\n",strlen(&arr));//&arr取出的是数组的地址,strlen从数组的首元素出发,因为数组arr里没有'\0'或0,所以结果是大于6的随机值
//	printf("%d\n",strlen(&arr + 1));//&arr取出的是数组的地址,&arr+1跳过整个数组,所以结果是随机值
//	printf("%d\n",strlen(&arr[0] + 1));//是第二个元素的地址,strlen从数组的第二个元素出发,因为数组arr里没有'\0'或0,所以结果是大于5的随机值
//	return 0;
//}


////题四:
////sizeof计算的是所占空间的大小,单位是字节
//int main()
//{
//	char arr[] = "abcdef";//a b c d e f '\0'---7个字符
//	
//	printf("%d\n",sizeof(arr));//sizeof(数组名)计算的是数组总大小,单位是字节:7*1=7
//	printf("%d\n",sizeof(arr + 0));//数组名这里表示首元素地址,arr+0后还是首元素地址,地址的大小就是4/8个字节
//	printf("%d\n",sizeof(*arr));//数组名这里表示首元素地址,*arr就是首元素,sizeof(首元素)就是1
//	printf("%d\n",sizeof(arr[1]));//第二个元素的大小:1
//	printf("%d\n",sizeof(&arr));//&arr取出的是数组的地址,但是数组的地址也是地址,地址的大小就是4/8个字节
//	printf("%d\n",sizeof(&arr + 1));//&arr取出的是数组的地址,&arr+1虽然跳过整个数组,但还是地址,所以是4/8个字节
//	printf("%d\n",sizeof(&arr[0] + 1));//计算的是第二个元素的地址,所以是4/8个字节
//	return 0;
//}


////题五:
////strlen计算字符串长度,遇到'\0'或0结束
//int main()
//{
//	char arr[] = "abcdef";//a b c d e f '\0'---7个字符
//
//	printf("%d\n",strlen(arr));//数组名这里表示首元素地址,因为数组arr的第七个元素是'\0',所以结果是6
//	printf("%d\n",strlen(arr + 0));//数组名这里表示首元素地址,arr+0还是首元素地址,因为数组arr的第七个元素是'\0',所以结果是6
//	//printf("%d\n",strlen(*arr));//arr是首元素地址,解引用得到的是首元素'a',因为'a'的Asall码值为97,所以从97为起始地址向后访问数据,属于非法访问内存,是错误的代码
//	//printf("%d\n",strlen(arr[1]));//arr[1]为第二个元素'b',因为'b'的Asall码值为98,所以从98为起始地址向后访问数据,属于非法访问内存,是错误的代码
//	printf("%d\n",strlen(&arr));//&arr取出的是数组的地址,strlen从数组的首元素出发,因为数组arr的第七个元素是'\0',所以结果是6
//	printf("%d\n",strlen(&arr + 1));//&arr取出的是数组的地址,&arr+1跳过整个数组,所以结果是随机值
//	printf("%d\n",strlen(&arr[0] + 1));//是第二个元素的地址,strlen从数组的第二个元素出发,因为数组arr的第七个元素是'\0',所以结果是5
//	return 0;
//}


////题六:
//int main()
//{
//	char *p = "abcdef";//a b c d e f '\0'   p存放的是a的地址,因为char只能存放1个字节的空间
//
//	printf("%d\n",sizeof(p));//计算指针变量p的大小  4/8
//	printf("%d\n",sizeof(p + 1));//p+1得到的是字符b的地址   4/8
//	printf("%d\n",sizeof(*p));//*p就是字符串的第一个字符'a'   1
//	printf("%d\n",sizeof(p[0]));//p[0] == *(p+0)就是字符串的第一个字符'a'   1
//	printf("%d\n",sizeof(&p));//4/8
//	printf("%d\n",sizeof(&p + 1));//4/8
//	printf("%d\n",sizeof(&p[0] + 1));//&p[0] + 1 == 元素a的地址+1 == 元素b的地址   4/8
//	return 0;
//}

////题七:
//int main()
//{
//	char *p = "abcdef";//a b c d e f '\0'   p存放的是a的地址,因为char只能存放1个字节的空间
//
//	printf("%d\n",strlen(p));//p这里表示首元素地址,因为字符串的第七个字符是'\0',所以结果是6
//	printf("%d\n",strlen(p + 1));//p这里表示首元素地址,因为p+1是第二个字符的地址,字符串的第七个字符是'\0',所以结果是5
//	//printf("%d\n",strlen(*p));//p是字符a的地址,解引用得到的是字符'a',因为'a'的Asall码值为97,所以从97为起始地址向后访问数据,属于非法访问内存,是错误的代码
//	//printf("%d\n",strlen(p[0]));//p[0] == *(p+0)就是字符串的第一个字符'a',因为'a'的Asall码值为97,所以从97为起始地址向后访问数据,属于非法访问内存,是错误的代码
//	printf("%d\n",strlen(&p));//&p取出的是字符a的地址的地址,strlen从&p开始访问,所以结果是随机值
//	printf("%d\n",strlen(&p + 1));//&p+1取出的是字符b的地址,strlen从&p+1开始访问,所以结果是随机值
//	printf("%d\n",strlen(&p[0] + 1));//&p[0] + 1 == 元素a的地址+1 == 元素b的地址,strlen从&p+1开始访问,所以结果是5
//	return 0;
//}



////题八:(重点)
////二维数组
//int main()
//{
//	int a[3][4] = {0};
//
//	printf("%d\n",sizeof(a));//sizeof(数组名)计算的是数组总大小,单位是字节:3*4*4=48
//	printf("%d\n",sizeof(a[0][0]));//计算首元素所占空间的大小   4
//	printf("%d\n",sizeof(a[0]));//a[0]相当于第一行作为一维数组的数组名,sizeof(a[0])把数组名单独放在sizeof()内,计算的是第一行的大小  4*4=16
//	printf("%d\n",sizeof(a[0] + 1));//a[0]是第一行的数组名,因为此时数组名不是单独放在sizeof内,所以这里数组名a[0]表示的是第一行第一个元素的地址,a[0]+1就是第一行第二个元素的地址   4/8
//	printf("%d\n",sizeof(*(a[0] + 1)));//a[0]是第一行的数组名,因为此时数组名不是单独放在sizeof内,所以这里数组名a[0]表示的是第一行第一个元素的地址,a[0]+1就是第一行第二个元素的地址,解引用得到第一行第二个元素   4
//	printf("%d\n",sizeof(a + 1));//a是二维数组的数组名,数组名没有单独放在sizeof()内,所以a是首元素地址,而二维数组的首元素是第一行,a就是第一行(首元素)的地址,a+1就是第二行的地址   4/8
//	printf("%d\n",sizeof(*(a + 1)));//a是二维数组的数组名,数组名没有单独放在sizeof()内,所以a是首元素地址,而二维数组的首元素是第一行,a就是第一行(首元素)的地址,a+1就是第二行的地址,解引用得到第二行的大小  16
//	printf("%d\n",sizeof(&a[0] + 1));//a[0]是第一行的数组名,&a[0]就是第一行的地址,&a[0]+1就是第二行的地址  4/8
//	printf("%d\n",sizeof(*(&a[0] + 1)));//a[0]是第一行的数组名,&a[0]就是第一行的地址,&a[0]+1就是第二行的地址,解引用得到第二行的大小   16
//	printf("%d\n",sizeof(*a));//a是二维数组的数组名,数组名没有单独放在sizeof()内,所以a是首元素地址,而二维数组的首元素是第一行,a就是第一行(首元素)的地址,解引用得到第一行的大小   16
//	printf("%d\n",sizeof(a[3]));//事实上sizeof并不会计算()内的表达式,也就是说数组在不在其实无所谓,a[3]就相当于a[0]   16
//	return 0;
//}


////真题
////题一:
//int main()
//{
//	int a[5] = {1,2,3,4,5};
//	int* ptr = (int*)(&a + 1);
//	printf("%d,%d",*(a + 1),*(ptr - 1));
//	return 0;
//}


////题二:
////假设:p的值为0x100000  求如下表达式的值为多少
////已知:结构体Test类型的变量大小是20个字节
//struct Test
//{
//	int Num;
//	char *pcName;
//	short sDate;
//	char cha[2];
//	short sBa[4];
//}*p;
//int main()
//{
//	p = (struct Test*)0x100000;
//	printf("%p\n",p + 0x1);//等价于p+1,跳过一个struct Test类型的大小
//	printf("%p\n",(unsigned long)p + 0x1);//0x100001
//	printf("%p\n",(unsigned int*)p +0x1);//等价于(unsigned int*)p+1,跳过一个int类型的大小
//	return 0;
//}


////题三:
//%x---以16进制数进行打印
//int main()
//{
//	int a[4] = {1,2,3,4};
//	int *ptr1 = (int*)(&a + 1);
//	int *ptr2 = (int *)((int)a + 1);
//	printf("%x,%x",ptr1[-1],*ptr2);//ptr1[-1] == *(ptr + (-1)) ==*(ptr - 1)
//	return 0;
//}


////题四:
//int main()
//{
//	int a[3][2] = {(0,1),(2,3),(4,5)};
//	int* p;
//	p = a[0];
//	printf("%d",p[0]);
//	return 0;
//}


////题五:
//int main()
//{
//	int a[5][5];
//	int(*p)[4];
//	p = a;
//	printf("%p,%d\n",&p[4][2] - &a[4][2],&p[4][2] - &a[4][2]);
//	return 0;
//}


////题六:
//int main()
//{
//	int aa[2][5] = {1,2,3,4,5,6,7,8,9,10};
//
//	int* ptr1 = (int*)(&aa + 1);
//	int* ptr2 = (int*)(*(aa + 1));
//
//	printf("%d,%d",*(ptr1 - 1),*(ptr2 - 1));
//	return 0;
//}


////题七:
//int main()
//{
//	char *a[] = {"work","at","alibaba"};
//	char** pa = a;
//	pa++;
//	printf("%s\n",*pa);
//	return 0;
//}


//题八:
int main()
{
	char *c[] = {"ENTER","NEW","POINT","FIRST"};
	char**cp[] = {c+3,c+2,c+1,c};
	char***cpp = cp;

	printf("%s\n",**++cpp);
	printf("%s\n",*--*++cpp + 3);
	printf("%s\n",*cpp[-2] + 3);
	printf("%s\n",cpp[-1][-1] + 1);
	return 0;
}
