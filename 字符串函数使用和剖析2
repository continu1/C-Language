#include <stdio.h>
#include <assert.h>
#include <string.h>
#include <ctype.h>

//strncmp---字符串比较
//int main()
//{
//	const char* p1 = "abcdefg";
//	const char* p2 = "abcdqwer";
//	int ret = strncmp(p1,p2,6);
//	printf("%d\n",ret);
//	return 0;
//}


//strstr---字符串查找
//NUL or Null --->  '\0'
//int main()
//{
//	char *p1 = "asdefghafdh";
//	char *p2 = "def";
//	char* ret =  strstr(p1,p2);
//	if(ret == NULL)
//	{
//		printf("子串不存在\n");
//	}
//	else
//	{
//		printf("%s\n",ret);
//	}
//	return 0;
//}


//模拟实现strstr
//char* my_strstr(char* p1,char* p2)
//{
//	char* s1 = p1;
//	char* s2 = p2;
//	char* cur = p1;
//	assert(p1 != NULL);
//	assert(p2 != NULL);
//	if(*p2 == '\0')
//	{
//		return p1;
//	}
//	while(*cur)
//	{
//		s1 = cur;
//		s2 = p2;
//		while((*s1 == *s2) && (*s1 != '\0') && (*s2 != '\0'))
//		{
//			s1++;
//			s2++;
//		}
//		if(*s2 == '\0')
//		{
//			return cur;
//		}
//		if(*s1 == '\0')
//		{
//			return NULL;
//		}
//		cur++;
//	}
//	return NULL;//找不到子串
//}
//int main()
//{
//	char* p1 = "asdfaaaaghjkl";
//	char* p2 = "aghj";
//	char* ret = my_strstr(p1,p2);
//	if(ret == NULL)
//	{
//		printf("找不到\n");
//	}
//	else
//	{
//		printf("%s\n",ret);
//	}
//	return 0;
//}


//strtok
//int main()
//{
//	//192.168.31.121
//	//192 168 31 121 --- strtok
//	char arr[] = "https/github.com";
//	char* p = "/.";
//	printf("%s\n",strtok(arr,p));
//	printf("%s\n",strtok(NULL,p));
//	printf("%s\n",strtok(NULL,p));
//	printf("%s\n",strtok(NULL,p));
//	return 0;
//}


//int main()
//{
//	char arr[] = "asd.sd.dfg.;..hjk";
//	char* p = ".;";
//	char buf[1024] = {0};
//	char* ret = NULL;
//	strcpy(buf,arr);
//	for(ret = strtok(arr,p); ret != NULL; ret = strtok(NULL,p))
//	{
//		printf("%s\n",ret);
//	}
//	return 0;
//}


//strerror
//#include <errno.h>
//int main()
//{
//	//错误码 --- 错误信息
//	//0  ---  NO error
//	//1  ---  Operation not permitted
//	//2  ---  NO such file or directory
//	//.....
//	//errno是一个全局的错误码变量
//	//当c语言的库函数在执行过程中,发生了错误,就会把对应的错误码赋值到error中
//
//	//打开文件
//	FILE* pf = fopen("test.txt","r");//r --- 读操作
//	if(pf == NULL)
//	{
//		printf("%s\n",strerror(errno));
//	}
//	else
//	{
//		printf("open file successfully\n");
//	}
//
//
//	/*char* str = strerror(errno);
//	printf("%s\n",str);*/
//
//	/*char* str1 = strerror(0);
//	printf("%s\n",str1);*/
//
//	//char* str2 = strerror(1);
//	//printf("%s\n",str2);
//
//	//char* str3 = strerror(2);
//	//printf("%s\n",str3);
//	return 0;
//}


//字符分类函数:
//#include <ctype.h>
//#include <wchar.h>
//int main()
//{
//	char ch = 'w';
//	printf("%d\n",islower(ch));
//	printf("%d\n",islower('%'));
//	printf("%d\n",islower(5));
//	printf("%d\n",islower('P'));
//	return 0;
//}


//字符转换
//int main()
//{
//	//char ch = 'G';
//	//printf("%c\n",tolower(ch));
//
//	char arr[] = "I LIKE PLAYING GAMES";
//	int i = 0;
//	while(arr[i])
//	{
//		if(arr[i] != '\0')
//		{
//			printf("%c",tolower(arr[i]));
//		}
//		i++;
//	}
//	return 0;
//}


//memcpy
//int main()
//{
//	int arr1[] = {1,2,3,4,5,6};
//	int arr2[6] = {0};
//	memcpy(arr2,arr1,sizeof(arr1));
//	return 0;
//}


//struct s
//{
//	char name[20];
//	int age;
//};
//int main()
//{
//	struct s arr1 = {{"张三",30},{"李四,20"}};
//	struct s arr2 = {0};
//	memcpy(arr2,arr1,sizeof(arr1));
//	return 0;
//}


//模拟实现
//void* my_memcpy(void* dest,const void* src,size_t num)
//{
//	void* ret = dest;
//	assert(dest != NULL);
//	assert(src != NULL);
//	while(num--)
//	{
//		*(char*)dest = *(char*)src;
//		++(char*)dest;
//		++(char*)src;
//	}
//	return ret;
//}
//int main()
//{
//	int arr1[] = {1,2,3,4,5,6};
//	int arr2[6] = {0};
//	my_memcpy(arr2,arr1,sizeof(arr1));
//	return 0;
//}


//memmove
//int main()
//{
//	int arr[] = {1,2,3,4,5,6,7,8,9,10};
//	memmove(arr+3,arr,4*5);
//	printf("%s\n",arr);
//	return 0;
//}


//memmove
//int main()
//{
//	int arr[] = {1,2,3,4,5,6,7,8,9,10};
//	int* p = arr;
//	int ret = sizeof(arr)/sizeof(arr[0]);
//	memmove(arr+2,arr,4*5);
//	while(ret--)
//	{
//		printf("%d ",*p);
//		p++;
//	}
//	return 0;
//}


//模拟实现memmove
//void* my_memmove(void* dest,const void* src,size_t count)
//{
//	void* ret = dest;
//	assert(dest != NULL);
//	assert(src != NULL);
//	if(dest < src)
//	{
//		while(count--)
//		{
//			*(char*)dest = *(char*)src;
//			++(char*)dest;
//			++(char*)src;
//		}
//	}
//	else
//	{
//		while(count--)
//		{
//			*((char*)dest + count) = *((char*)src + count);
//		}
//	}
//	return ret;
//}
//int main()
//{
//	int arr[] = {1,2,3,4,5,6,7,8,9,10};
//	my_memmove(arr+2,arr,4*5);
//	return 0;
//}


//memcmp
//int main()
//{
//	int arr1[] = {1,2,3,4,5};
//	int arr2[] = {1,2,5,4,3};
//	int ret = memcmp(arr1,arr2,2*4);
//	printf("%d\n",ret);
//	return 0;
//}


//memset --- 内存设置
int main()
{
	char arr[10] = "";
	int i = 0;
	memset(arr,'#',10);
	for(i=0;i<10;i++)
	{
		printf("%c ",arr[i]);
	}
	return 0;
}
