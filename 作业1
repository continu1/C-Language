#include <stdio.h>
#include <string.h>
#include <assert.h>
#include <math.h>
//杨氏矩阵
//内容:有一个数字矩阵,矩阵的每行从左到右是递增的,请编写程序在这样的矩阵中查找某个数字是否存在
//要求:时间复杂度小于O(N);

//1 2 3
//4 5 6
//7 8 9

//1 2 3
//2 3 4
//3 4 5
//void FindNum(int arr[3][3],int k,int row,int col)
//{
//	int x = 0;
//	int y = col-1;
//	while(x<=row-1 && y>=0)
//	{
//		if(arr[x][y] > k)
//		{
//			y--;
//		}
//		else if(arr[x][y] < k)
//		{
//			x++;
//		}
//		else if(arr[x][y] == k)
//		{
//			printf("找到了,在第%d行,第%d列\n",x+1,y+1);
//			x = row+1;
//			break;
//		}
//	}
//	if(x != row+1)
//	{
//		printf("找不到\n");
//	}
//}
//int main()
//{
//	int arr[3][3] = {{1,2,3},{4,5,6},{7,8,9}};
//	int k = 17;
//	FindNum(arr,k,3,3);
//	return 0;
//}


////题一:
//int main()
//{
//	unsigned long pulArray[] = {6,7,8,9,10};
//	unsigned long *pulPtr;
//	pulPtr = pulArray;
//	*(pulPtr + 3) += 3;
//	printf("%d,%d\n",*pulPtr,*(pulPtr + 3));
//	return 0;
//}



////写一个函数,使字符串逆序
//void reverse(char* str)
//{
//	char tmp;
//	int len = strlen(str);
//	char* left = str;
//	char* right = str + len - 1;
//	assert(str);
//	while(left<right)
//	{
//		tmp = *left;
//		*left = *right;
//		*right = tmp;
//		left++;
//		right--;
//	}
//}
//int main()
//{
//	char arr[50] = {0};
//	scanf("%s",arr);
//	reverse(arr);
//	printf("%s",arr);
//	return 0;
//}


////求:a+aa+aaa+aaaa+aaaaa+...
//int main()
//{
//	int a = 0;
//	int n = 0;
//	int sum = 0;
//	int i = 0;
//	int ret = 0;
//	scanf("%d%d",&a,&n);
//	for(i=0;i<n;i++)
//	{
//		ret = ret * 10 + a;
//		sum += ret;
//	}
//	printf("%d\n",sum);
//	return 0;
//}


////1-100000的水仙花数
//int main()
//{
//	int i = 0;
//	int n = 0;
//	int sum = 0;
//	int tmp;
//	for(i=0;i<=100000;i++)
//	{
//		n = 1;
//		tmp = i;
//		while(tmp/10 != 0)
//		{
//			n++;
//			tmp /= 10;
//		}
//		tmp = i;
//		while(tmp)
//		{
//			sum += pow(tmp % 10,n);
//			tmp /= 10;
//		}
//		if(i == sum)
//		{
//			printf("%d ",i);
//		}
//	}
//	return 0;
//}


////菱形
//int main()
//{
//	int line = 0;
//	int i = 0;
//	int j = 0;
//	scanf("%d",&line);
//	for(i=0;i<line;i++)
//	{
//		j = 0;
//		for(j=0;j<line-1-i;j++)
//		{
//			printf(" ");
//		}
//		for(j=0;j<2*i+1;j++)
//		{
//			printf("*");
//		}
//		printf("\n");
//	}
//	for(i=0;i<line - 1;i++)
//	{
//		j = 0;
//		for(j=0;j<=i;j++)
//		{
//			printf(" ");
//		}
//		for(j=0;j<2*(line-1-i)-1;j++)
//		{
//			printf("*");
//		}
//		printf("\n");
//	}
//	return 0;
//}


////一瓶汽水一元,两个空瓶的换一瓶汽水,求能换多少汽水
//int main()
//{
//	int money = 0;
//	int total = 0;
//	int empty = 0;
//	scanf("%d",&money);
//	total = money;
//	empty = money;
//	while(empty>1)
//	{
//		total = total + empty/2;
//		empty = empty/2 + empty%2;
//	}
//	printf("total = %d\nempty = %d",total,empty);
//	return 0;
//}


////实现基数在数组左边,偶数在数组右边
//void move(int arr[],int sz)
//{
//	int left = 0;
//	int right = sz-1;
//	int tmp = 0;
//	while(left < right)
//	{
//		while(arr[left]%2 == 1 && left<right)
//		{
//			left++;
//		}
//		while(arr[right]%2 == 0 && left<right)
//		{
//			right--;
//		}
//		if(left < right)
//		{
//			tmp = arr[left];
//			arr[left] = arr[right];
//			arr[right] = tmp;
//		}
//	}
//}
//void print(int arr[],int sz)
//{
//	int i = 0;
//	for(i=0;i<sz;i++)
//	{
//		printf("%d ",arr[i]);
//	}
//}
//int main()
//{
//	int arr[10] = {1,2,3,4,5,6,7,8,9,10};
//	int sz = sizeof(arr)/sizeof(arr[0]);
//	move(arr,sz);
//	print(arr,sz);
//	return 0;
//}



//int main()
//{
//	int a = 0;
//	int b = 0;
//	int c = 0;
//	int d = 0;
//	int e = 0;
//	for(a=1;a<=5;a++)
//	{
//		for(b=1;b<=5;b++)
//		{
//			for(c=1;c<=5;c++)
//			{
//				for(d=1;d<=5;d++)
//				{
//					for(e=1;e<=5;e++)
//					{
//						if( ((b==2) + (a==3) == 1) && 
//							((b==2) + (e==4) == 1) && 
//							((c==1) + (d==2) == 1) && 
//							((c==5) + (d==3) == 1) && 
//							((e==4) + (a==1) == 1))
//						{
//							if(a*b*c*d*e == 120)
//								printf(" a = %d \n b = %d \n c = %d \n e = %d",a,b,c,d,e);
//						}
//					}
//				}
//			}
//		}
//	}
//	return 0;
//}

//#include <stdlib.h>
//int main()
//{
//	//申请空间
//	int *p =(int*)malloc(10*sizeof(int));
//	//使用空间
//	//***********
//	//释放空间---并不是置为NULL
//	free(p);
//	return 0;
//}


//int main()
//{
//	char str1[] = "hello bit.";
//	char str2[] = "hello bit.";
//	char *str3 = "hello bit.";//常量字符串(内容不能改变),因为它被放在了内存的只读数据区(只能读)
//	char *str4 = "hello bit.";
//	if(str1 == str2)//str1与str2是首元素地址,两个数组所表示的空间不一样
//		printf("str1 and str2 are same\n");
//	else
//		printf("str1 and str2 are not same\n");
//	if(str3 == str4)//两指针存的都是同一块空间的地址,因为常量字符串内容相同
//		printf("str3 and str4 are same\n");
//	else
//		printf("str3 and str4 are not same\n");
//	return 0;
//}

/*1.
void test(char* arr[5])
void test(char**arr)

char* arr[5] = {"hello","bit"};
test(arr);

2.
void print_arr(int(*arr)[5],int row,int col)
void print_arr(int arr[3][5],int row,int col)

int arr[3][5] = {1,2,3,4,5,6,7,8,9,10};
print_arr(arr,3,5);*/

//int main()
//{
//	int a[5] = {5,4,3,2,1};
//	int *ptr = (int*)(&a + 1);
//	printf("%d,%d",*(a + 1),*(ptr - 1));//4 1
//	return 0;
//}


//int main()
//{
//	int aa[2][5] = {10,9,8,7,6,5,4,3,2,1};
//	int* ptr1 = (int*)(&aa + 1);
//	int* ptr2 = (int*)(*(aa + 1));
//	printf("%d,%d",*(ptr1 - 1),*(ptr2 - 1));
//	return 0;
//}


//实现一个函数,可以左旋字符串的k个字符
//例如:
//ABCD左旋一个字符得到BCDA
//ABCD左旋两个字符得到CDAB

////法一:
//#include <string.h>
//#include <assert.h>
//void left_move(char* const arr,const int n)
//{
//	int len = strlen(arr);
//	char tmp;
//	int k = 0;
//	int i = 0;
//	assert(arr != NULL);
//	assert(n<=6);
//	//左旋n个字符
//	for(k=0;k<n;k++)
//	{
//		//左旋一个字符
//		tmp = *arr;
//		for(i=0;i<len-1;i++)
//		{
//			*(arr+i) = *(arr+1+i);
//		}
//		*(arr+len-1) = tmp;
//	}
//
//}
//int main()
//{
//	char arr[] = "abcdef";
//	int n;
//	scanf("%d",&n);
//	left_move(arr,n);
//	printf("%s",arr);
//	return 0;
//}


//法二:
//ab cdef---先拆开
//ba fedc---各自翻转
//cdefab ---整体翻转
//#include <assert.h>
//#include <string.h>
//void reverse(char* left,char* right)
//{
//	char tmp;
//	assert(left != NULL);
//	assert(right != NULL);
//	while(right>left)
//	{
//		tmp = *left;
//		*left = *right;
//		*right = tmp;
//		left++;
//		right--;
//	}
//}
//void left_move(char* arr,const int n)
//{
//	int len = strlen(arr);
//	assert(arr != NULL);
//	assert(n<=len);
//	reverse(arr,arr+n-1);//逆序左边
//	reverse(arr+n,arr+len-1);//逆序右边
//	reverse(arr,arr+len-1);//逆序整体
//}
//int main()
//{
//	char arr[] = "abcdef";
//	int n;
//	scanf("%d",&n);
//	left_move(arr,n);
//	printf("%s",arr);
//	return 0;
//}


//判断一个字符串是否为另一个字符串左旋所得
//法一:
//#include <string.h>
//#include <assert.h>
//int is_left_move(char* const arr1,char* const arr2)
//{
//	char tmp;
//	int i,k;
//	int len = strlen(arr1);
//	assert(arr1 != NULL);
//	assert(arr2 != NULL);
//	for(i=0;i<len;i++)
//	{
//		tmp = *arr1;
//		for(k=0;k<len-1;k++)
//		{
//			arr1[k] = arr1[k+1];
//		}
//		*(arr1+len-1) = tmp;
//		if((int)strcmp(arr1,arr2) == 0)
//			return 1;
//	}
//	return 0;
//}
//int main()
//{
//	char arr1[] = "abcdef";
//	char arr2[] = "bcdefa";
//	int ret = is_left_move(arr1,arr2);
//	printf("%d\n",ret);
//	return 0;
//}


//法二:
//在原字符串的基础上,追加一次原字符串,里面包含左旋的所有结果
//例:abcdef abcdef
#include <string.h>
#include <stdio.h>
#include <assert.h>
int is_left_move(char* const arr1,char*  const arr2)
{
	int len = strlen(arr1);
	char* ret;
	assert(len == strlen(arr2));
	assert(arr1 != NULL);
	assert(arr2 != NULL);
	//1.在arr1字符串中追加一个arr1字符串
	//strcat(arr1,arr1)//err
	strncat(arr1,arr1,len);
	//2.判断arr2指向的字符串是否是arr1指向的字符串的字串
	//strstr--找子串的
	ret = strstr(arr1,arr2);
	if(ret == NULL)
	{
		return 0;
	}
	else
	{
		return 1;
	}
}
int main()
{
	char arr1[30] = "abcdef";
	char arr2[] = "cdefab";
	int ret = is_left_move(arr1,arr2);
	printf("%d\n",ret);
	return 0;
}


////strcat---字符串追加
////不能自己追加自己
//#include <string.h>
//int main()
//{
//	char arr1[30] = "abc";
//	char arr2[] = "def";
//	strcat(arr1,arr2);
//	printf("%s\n",arr1);
//}
