#include <stdio.h>
#include <windows.h>
//理解以下代码de意思(题目无误)
//int arr[5];
//int *parr1[10];
//int (*parr2)[10];
//int (*parr3[10])[5];


//解析意思:
//代码1.(* (   void(*)()   )0 ) (); //调用0地址处内的 参数为无参 返回类型为void(*)()的函数
//void(*)()---函数指针类型
//把0强制类型转换成:void(*)()函数指针类型----0就是一个函数的地址
//调用0地址处的该函数

//代码2.void (*  signal(int,void(*)(int))  ) (int);
//signal是一个函数声明
//signal函数的参数有两个,第一个是int,第二个是函数指针,该函数指向得函数是int,返回类型是void
//signal函数的返回类型也是一个函数指针;该函数指针指向得函数的参数是int,返回类型是void
//简化:
//typedef void(* pfun_t)(int);
//pfun_t signal(int,pfun_t);
//typedef unsigned int unit;


//int main()
//{
//	int arr[3][5] = {{3,4,5,6,7},{4,5,6,7,8},{5,6,7,8,9}};
//	int i,j;
//	int(*p)[5] = arr;
//	for(i=0;i<3;i++)
//	{
//		for(j=0;j<5;j++)
//		{
//			printf("%d ",arr[i][j]);
//			printf("%d ",p[i][j]);
//
//			printf("%d ",(*(p+i))[j]);
//			printf("%d ",*(*(p+i)+j));
//
//			printf("\n");
//		}
//		printf("\n");
//	}
//	return 0;
//}

//int main()
//{
//	int arr[10] = {1,2,3,4,5,6,7,8,9,10};
//	int i = 0;
//	int* p = arr;
//	for(i=0;i<10;i++)
//	{
//		printf("%-2d ",arr[i]);
//		printf("%-2d ",p[i]);
//
//		printf("%-2d ",*(p+i));
//		printf("%-2d ",*(arr+i));
//		
//		printf("\n");
//	}
//	return 0;
//}

//int main()
//{
//	char ch = 'w';
//	char *p1 = &ch;
//	const char *p2 = "abcdef";
//
//	int* arr[10];
//	char* ch[5];
//
//	int arr2[5];
//	int (*pa)[5] = &arr2;
//	return 0;
//}

//void test(int arr[])
//{}
//void test(int arr[10])
//{}
//void test(int *arr)
//{}
//void test2(int *arr[20])
//{}
//void test2(int **arr)
//{}
//int main()
//{
//	int arr1[10] = {0};
//	int *arr2[20] = {0};
//	test(arr1);
//	test2(arr2);
//	return 0;
//}

//void test(int arr[3][5])
//{}
//void test(int arr[][5])//行可以省略,但列不能省略
//{}
//void test(int (*arr)[5])
//{}
//int main()
//{
//	int arr[3][5];
//	test(arr);//二维数组传参
//	return 0;
//}

//void print(int* p,int sz)
//{
//	int i = 0;
//	for(i=0;i<sz;i++)
//	{
//		printf("%d\n",*(p+i));
//	}
//}
//int main()
//{
//	int arr[10] = {1,2,3,4,5,6,7,8,9};
//	int *p = arr;
//	int sz = sizeof(arr)/sizeof(arr[0]);//10
//	print(p,sz);
//	return 0;
//}

//void test1(int *p)
//{}
//void test2(char *p)
//{}
//int main()
//{
//	int a = 10;
//	int *p1 = &a;
//	test1(&a);
//	test1(p1);
//	
//	char ch = 'w';
//	char *pc = &ch;
//	test2(&ch);
//	test2(pc);
//	return 0; 
//}

//二级指针传参
//void test(int** ptr)
//{
//	printf("num = %d\n",**ptr);
//}
//int main()
//{
//	int n = 10;
//	int *p = &n;
//	int **pp = &p;
//	int* arr[10];
//	test(pp);
//	test(&p);
//	test(arr);//指针数组也可以
//	return 0;
//}

////函数指针------指向函数的指针
//int Add(int x,int y)
//{
//	return x+y;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	//printf("sum = %d\n",Add(a,b));
//	////&函数名  和  函数名 都是函数的地址:
//	//printf("%p\n",&Add);
//	//printf("%p\n",Add);
//
//	int (*pa)(int,int) = Add;
//	int (*pb)(int x,int y) = Add;
//
//	printf("%d\n",(*pa)(2,3));//5
//	return 0;
//}

//void print(char* str)
//{
//	printf("%s\n",str);
//}
//int main()
//{
//	void (*p)(char*) = print;
//	(*p)("hhhhhhhhhha");
//	return 0;
//}

//int add(int x,int y)
//{
//	return x+y;
//}
//int main()
//{
//	int (*p)(int,int) = add;
//	printf("%d\n",add(3,5));
//	printf("%d\n",p(3,5));
//	printf("%d\n",(*p)(3,5));
//	printf("%d\n",(**p)(3,5));
//	printf("%d\n",(***p)(3,5));
//	printf("%d\n",(******p)(3,5));
//	return 0;
//}

//int add(int x,int y)
//{
//	return x+y;
//}
//int sub(int x,int y)
//{
//	return x-y;
//}
//int mul(int x,int y)
//{
//	return x*y;
//}
//int div(int x,int y)
//{
//	return x/y;
//}
//int main()
//{
//	int i = 0;
//	//指针数组
//	int* arr[5];
//	int(*pa)(int,int) = add;
//	//需要一个数组,这个数组可以存放4个函数的地址-----函数指针的数组
//	int(*parr[4])(int,int) = {add,sub,mul,div};//函数指针的数组
//	for(i=0;i<4;i++)
//	{
//		printf("%d\n",parr[i](6,3));
//		printf("%p\n",parr[i]);
//	}
//	return 0;
//}

////写一个函数指针,能够指向my_strcpy
////写一个函数指针数组 pfArr,能够存放4个my_strcpy函数的地址
//char* my_strcpy(char* dest,const char* src)
//{}
//int main()
//{
//	char* (*pf)(char*,const char*) = my_strcpy;
//	char* (*pfArr[4])(char*,const char*);
//	return 0;
//}

//void test()
//{}
//int main()
//{
//	printf("%p\n",test);
//	printf("%p\n",&test);
//	return 0;
//}

//计算器:
//void menu()
//{
//	printf("********************************\n");
//	printf("****   1.add     2.sub     ****\n");
//	printf("****   3.mul     4.div     ****\n");
//	printf("**            0.exit         **\n");
//	printf("********************************\n");
//}
//int add(int x,int y)
//{
//	return x+y;
//}
//int sub(int x,int y)
//{
//	return x-y;
//}
//int mul(int x,int y)
//{
//	return x*y;
//}
//int Div(int x,int y)
//{
//	return x/y;
//}
//int main()
//{
//	int input,x,y;
//	do 
//	{
//		menu();
//		printf("请选择:\n");
//		scanf("%d",&input);
//		printf("请输入两个操作数:\n");
//		scanf("%d%d",&x,&y);
//		switch(input)
//		{
//		case 1:
//			printf("%d\n",add(x,y));
//			break;
//		case 2:
//			printf("%d\n",sub(x,y));
//			break;
//		case 3:
//			printf("%d\n",mul(x,y));
//			break;
//		case 4:
//			printf("%d\n",Div(x,y));
//			break;
//		case 0:
//			printf("退出\n");
//			break;
//		default:
//			printf("选择错误\n");
//				break;
//		}
//	}while(input);
//	return 0;
//}

////计算器(改良版)
//void menu()
//{
//	printf("********************************\n");
//	printf("****   1.add     2.sub     ****\n");
//	printf("****   3.mul     4.div     ****\n");
//	printf("**     5.xor     0.exit       **\n");
//	printf("********************************\n");
//}
//int add(int x,int y)
//{
//	return x+y;
//}
//int sub(int x,int y)
//{
//	return x-y;
//}
//int mul(int x,int y)
//{
//	return x*y;
//}
//int Div(int x,int y)
//{
//	return x/y;
//}
//int xor(int x,int y)//异或
//{
//	return x^y;
//}
//int main()
//{
//	int input,x,y;
//	int (*pfArr[])(int,int) = {0,add,sub,mul,Div,xor};//函数指针数组---转移表
//	do 
//	{
//		menu();
//		printf("请选择:\n");
//		scanf("%d",&input);
//		if(input>=1 && input<=5)
//		{
//			printf("请输入两个操作数:\n");
//			scanf("%d%d",&x,&y);
//			printf("%d\n",pfArr[input](x,y));
//		}
//		else if(input == 0)
//		{
//			printf("退出\n");
//		}
//		else
//		{
//			printf("选择错误\n");
//		}
//	}while(input);
//	return 0;
//}
