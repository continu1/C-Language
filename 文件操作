#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>

//文件操作:
//什么是文件:磁盘上的文件就是文件
//但是在程序设计中:我们一般谈的文件有两种:程序文件,数据文件
//程序文件可以操作数据文件

//程序文件:
//包括源程序文件(后缀为.c),目标文件(windows环境后缀为.obj),可执行程序(windows环境后缀为.exe)
//数据文件:
//文件的内容不一定是程序,而是程序运行时读写的数据,比如程序运行需要从中读取数据的文件,或者输出内容的文件

//文件名:
//一个文件要有一个唯一的文件标识,以便于用户识别和使用
//文件名包含3部分:文件路径+文件名主干+文件后缀
//例如: c:\code\test.txt
//为了方便起见,文件标识常被称为文件名

//文件类型:
//根据数据的组织形式,数据文件被称为文本文件或者二进制文件
//数据在内存中以二进制的形式存储,如果不加转换的输出到外存,就是二进制文件
//如果要求在外存上以ASCLL码的形式存储,则需要在存储前转换.以ASCLL字符的形式存储文件就是文本文件

//一个数据如何在内存中存储？
//字符一律一ASCLL形式存储,数值型数据既可以用ASCLL形式存储,也可以用二进制形式存储
//如有整数10000,如果以ASCLL码的形式输出到磁盘,则磁盘中占用5个字节(每个字符占一个字节),而以二进制形式输出,则在磁盘上只占4个字节

//文件缓冲区
//ANSIC标准采用"缓冲文件系统"处理的数据文件的,所谓缓冲文件系统是指系统自动的在内存中为程序中每一个正在使用的文件开辟一块"文件缓冲区".
//从内存向磁盘输出数据会先送到内存中的缓冲区,装满缓冲区后才一起送到磁盘上,如果从磁盘向计算机读入数据,则从磁盘文件中读取数据输入到内存缓
//缓冲区(充满缓冲区),然后再从缓冲区逐个的将数据送到程序数据区(程序变量等),缓冲区的大小根据C编译系统决定

//文件指针:
//缓冲文件系统中,关键的概念是"文件类型指针",简称"文件指针"
///每个被使用的文件都在内存中开辟了一个相应的文件信息区,用来存放文件的相关信息(如文件的名字,文件状态及文件当前的位置等).
//这些信息是保存在一个结构体变量中的.该结构体类型是有系统声明的,取名FILE
//每当打开一个文件的时候,系统会根据文件的情况自动创建一个FILE结构的变量,并填充其中的信息,使用者不必关心细节
//一般都是通过一个FILE的指针来维护这个FILE结构的变量,这样使用起来更加方便

//文件的打开和关闭
//文件在读写之前应该先打开文件,在使用后应该关闭文件
//在编写程序的时候,在打开文件的同时,都会返回一个FILE*指针变量指向该文件,也相当于建立了指针和文件的关系
//ANSIC规定使用fopen函数来打开文件,fclose来关闭文件

//scanf/printf   是针对标准输入流/标准输出流的格式化输入/输出语句
//fscanf/fprintf 是针对所有输入流/所有输出流的格式化输入/输出语句
//sscanf/sprintf 从字符串中读取格式化的数据/把格式化的数据存储到字符串

//int main()
//{
//	int a = 10000;
//	//相对路径的写法:
//	FILE* pf = fopen("test1.txt","wb");
//	fwrite(&a,4,1,pf);
//	fclose(pf);
//	pf = NULL;
//	return 0;
//}



//int main()
//{
//	//打开文件test.txt
//
//	//.  表示当前路径
//	//.. 表示上一路径
//	//fopen("test.txt","r");当前路径
//	//fopen("../test.txt","r");上一路径
//	//fopen("../../test.txt","r");上上一路径
//
//	//绝对路径的写法:
//	FILE* pf = fopen("C:\\vscode\\编程\\上课\\文件操作\\文件操作\\test.txt","r");
//	if(pf == NULL)
//	{
//		printf("%s\n",strerror(errno));
//		return 0;
//	}
//	//打开成功
//	//读文件
//	else
//	{
//		//.....
//		//关闭文件
//		fclose(pf);
//		pf = NULL;
//	}
//	return 0;
//}



//int main()
//{
//	FILE* pfWrite = fopen("test.txt","w");
//	FILE* pfRead;
//	if(pfWrite == NULL)
//	{
//		printf("%s\n",strerror(errno));
//		return 0;
//	}
//	else
//	{
//		//写文件
//		fputc('b',pfWrite);
//		fputc('i',pfWrite);
//		fputc('t',pfWrite);
//		//关闭文件
//		fclose(pfWrite);
//		pfWrite = NULL;
//		pfRead = fopen("test.txt","r");
//		if(pfRead == NULL)
//		{
//			printf("%s\n",strerror(errno));
//			return 0;
//		}
//		else
//		{
//			//读文件
//			printf("%c",fgetc(pfRead));
//			printf("%c",fgetc(pfRead));
//			printf("%c",fgetc(pfRead));
//			//关闭文件
//			fclose(pfRead);
//			pfRead = NULL;
//		}
//	}
//	return 0;
//}


//从键盘输入,输出到屏幕
//键盘&屏幕都是外部设备
//键盘---标准输入设备---stdin
//屏幕---标准输出设备---stdout
//是一个程序默认打开的两个流设备
//默认打开:stdin stdout stderr 都是FILE*类型

//int main()
//{
//	//从键盘输入,从屏幕输出
//	int ch = fgetc(stdin);
//	fputc(ch,stdout);
//	return 0;
//}


//int main()
//{
//	char buf[1024] = {0};
//	FILE* pf = fopen("test2.txt","r");
//	if(pf == NULL)
//	{
//		printf("%s\n",strerror(errno));
//		return 0;
//	}
//	else
//	{
//		fgets(buf,1024,pf);
//		printf("%s",buf);
//		fgets(buf,1024,pf);
//		printf("%s",buf);
//		fclose(pf);
//		pf = NULL;
//	}
//	return 0;
//}


//int main()
//{
//	//从键盘读取一行文本信息
//	char buf[1024] = {0};
//	//fgets(buf,1024,stdin);//从标准输入流读取
//	//fputs(buf,stdout);//输出到标准输出流
//	//等同于:
//	gets(buf);
//	puts(buf);
//	return 0;
//}


//struct s
//{
//	int n;
//	float score;
//	char arr[10];
//};
////int main()//写
////{
////	struct s s1 = {100,3.14f,"bit"};
////	FILE* pf = fopen("test4.txt","w");
////	if(pf == NULL)
////	{
////		printf("%s\n",strerror(errno));
////		return 0;
////	}
////	else
////	{
////		//格式化的形式写文件
////		fprintf(pf,"%d %f %s",s1.n,s1.score,s1.arr);
////		fclose(pf);
////		pf = NULL;
////	}
////	return 0;
////}
//int main()//读
//{
//	struct s s1 = {0};
//	FILE* pf = fopen("test4.txt","r");
//	if(pf == NULL)
//	{
//		printf("%s\n",strerror(errno));
//		return 0;
//	}
//	else
//	{
//		fscanf(pf,"%d %f %s",&(s1.n),&(s1.score),s1.arr);
//		printf("%d %.2f %s\n",s1.n,s1.score,s1.arr);
//		fclose(pf);
//		pf = NULL;
//	}
//	return 0;
//}


//struct s
//{
//	int n;
//	float d;
//	char arr[10];
//};
//int main()
//{
//	struct s s1 = {0};
//	fscanf(stdin,"%d %f %s",&(s1.n),&(s1.d),s1.arr);
//	fprintf(stdout,"%d %f %s",s1.n,s1.d,s1.arr);
//	return 0;
//}


//struct s
//{
//	int n;
//	float d;
//	char arr[20];
//};
//int main()
//{
//	struct s s1 = {60,5.16f,"hello world"};
//	struct s s2 = {0};
//	char buf[1024] = {0};
//	//把格式化的数据转换成字符串存储到buf
//	sprintf(buf,"%d %f %s",s1.n,s1.d,s1.arr);
//	printf("%s\n",buf);
//	//从buf中读取格式化的数据到s2中
//	sscanf(buf,"%d %f %s",&(s2.n),&(s2.d),s2.arr);
//	printf("%d %f %s\n",s2.n,s2.d,s2.arr);
//	return 0;
//}



////fwrite
//struct s
//{
//	char name[10];
//	int age;
//	float scort;
//};
////int main()
////{
////	struct s s1 = {"wangwu",30,91.2};
////	struct s tmp = {0};
////	FILE* pf = fopen("text5.txt","wb");
////	FILE* ptmp = fopen("test5.txt","r");
////	if(pf == NULL)
////	{
////		printf("%s\n",strerror(errno));
////		return 0;
////	}
////	else
////	{
////		fwrite(&s1,sizeof(struct s),1,pf);
////		fclose(pf);
////		pf = NULL;
////	}
////	return 0;
////}
//int main()
//{
//	struct s tmp = {0};
//	FILE* pf = fopen("text5.txt","rb");
//	if(pf == NULL)
//	{
//		printf("%s\n",strerror(errno));
//		return 0;
//	}
//	else
//	{
//		fread(&tmp,sizeof(struct s),1,pf);
//		printf("%s %d %f",tmp.name,tmp.age,tmp.scort);
//		fclose(pf);
//		pf = NULL;
//	}
//	return 0;
//}


//int main()
//{
//	int pos;
//	FILE* pf = fopen("test6.txt","r");
//	if(pf == NULL)
//	{
//		printf("%s\n",strerror(errno));
//		return 0;
//	}
//	else
//	{
//		//1.定位文件指针
//		fseek(pf,2,SEEK_CUR);
//		//2.读取文件
//		printf("%c\n",fgetc(pf));
//
//		pos = ftell(pf);
//		printf("%d\n",pos);
//
//		rewind(pf);
//		printf("%c\n",fgetc(pf));
//
//		fclose(pf);
//		pf = NULL;
//	}
//	return 0;
//}



//int main()
//{
//	int c;//注意:int,非char,要求处理EOF
//	FILE* pf = fopen("test.txt","r");
//	if(!pf)
//	{
//		perror("File opening failed");
//		return EXIT_FAILURE;
//	}
//	//fgetc当读取失败的时候或者遇到文件结束的时候,都会返回EOF
//	while((c = fgetc(pf)) != EOF)//标准C I/O读取文件循环
//	{
//		putchar(c);
//	}
//	//判断是什么原因结束的:
//	if(ferror(pf))
//	{
//		puts("I/O error when reading");
//	}
//	else if(feof(pf))
//	{
//		puts("End of file reached successfully");
//	}
//	fclose(pf);
//	pf = NULL;
//	return 0;
//}


//perror
int main()
{
	FILE* pf = fopen("testz.txt","r");
	if(!pf)
	{
		perror("open file testz.txt");
		return 0;
	}
	fclose(pf);
	pf = NULL;
	return 0;
}
